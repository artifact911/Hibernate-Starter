@BatchSize (не надо юзать) - позволяет нам сразу пачкой получить зависимые сущности.
    - Сработает над Коллекцией, но не сработает над отдельной сущностью (@ManyToOne). Тогда эту аннотацию можно
        ставить над Entity и в таком случа, везде, где будет маппится эта сущность, будет применяться @BatchSize:
            @Entity
            @BatchSize(size = 3)
            public class Company {


      @BatchSize(size = 3)
      @OneToMany(mappedBy = "receiver")
      private List<Payment> payments = new ArrayList<>();

      (У нас пять пользователей)
    Произойдет следующее: В пределах одного запроса с учетом установленного size выполнится запрос in на трех
        пользаков + второй запрос такой же, но на оставшихся 2х пользаков; Итого вместо пяти запросов, мы получили
        два.

    Таким образом мы сможет теперь тут заюзать и лимиты и оффсеты и не будет никакого Декартого произведения.

    По пробленма N+1 все еще не решается. Т.к. запросов цу нас было:
        1. Достали всех пользаков
        2. потом получили для пользаков payments по принципу 5/3 (пять пользаков, размер батча 3)
        3. Для оставшийся части пользаков получили payments
    Итого 3 запроса.