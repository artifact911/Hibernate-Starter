@Entity - ставим над классом. Значит это сущность hibernate. Заставляет указать на поле, которое является primaryKey(id);
@Id - ставим над полем, которое является primaryKey. Требование к полю - тип должен быть serializable;
@GeneratedValue(strategy = GenerationType.IDENTITY) - над полем, для автогенерации первичных ключей с указанием
    стратегии генерации;

@SequenceGenerator - над полем id, если бзаем seq для генерации id;
@TableGenerator - ад полем id, если используем table-стратегию;
@Table(name = "users", schema = "public") - если название таблицы отличное от названия класса-entity;
@Column(name = "birth_date") - если название колонки отличное от названия поля;
@Enumerated(EnumType.STRING) - для того, что бы пушить значения енамов в БД как стринг (по умолчанию цифрами);
@Convert(converter = BirthdayConverter.class) - над полем, если нужно объяснить Хиберу, как преобразовать тип этого поля;
@Converter(autoApply = true) - ставим над конвертером, указав хиберу, что юзай его автоматически (предварительно
    настроив configuration.addAttributeConverter(new BirthdayConverter());)

@Embeddable - ставим над классом, который бутет составным в сущности;
@Embedded - над полем, которое является составным классом для сущности;
@EmbeddedId - над полем, которое является составным ключем в БД;
@AttributeOverride - над полем составляющего класса внутри которого мы хотим заменить имя поля на соответствие в БД;

@Access - над классом:
    - (AccessType.FIELD) - по умолчанию и это значит, что Хибер через рефлексию обращается к нашим полям напрямую;
    - (AccessType.PROPERTY) - не к полям, а к геттерам и сеттерам игнорирую анноташки над полями;

@Transient - над полем. Означает, что мы не хотим сериализовать/десериализовать это поле и соответственно писать
    его в БД. Лучше такое не делать и хранить в сущностях только то, что нужно;

@Temporal - если юзаем тип Date в Java чтоб без проблем пушить в БД:
    - (TemporalType.TIMESTAMP) - аналог LocalDateTime
    - (TemporalType.DATE) - аналог LocalDate
    - (TemporalType.TIME) - аналог LocalTime

