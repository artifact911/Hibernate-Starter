Session (interface) - обертка вокруг Connection, которая работает с нашими сущностями. По другому, отслеживает полный
    жизненный цикл наших сущностей.
    Основные методы:
        - save() - для сохранения
        - update() - для обновления
        - saveOrUpdate() - который либо сохраняет, либо обновляет в зависимости есть такая сущность в БД либо нет
        - delete()
        - get() - получить по id
        - createQuery() - усли хотим сами создать какой-то сложный нестандартный запрос

Именно session создает нам этот красивый sql-запрос и делает это он через reflection api.

class HibernateRunnerTest {

    @SneakyThrows
    @Test
    void checkReflectionApi() {
        User user = User.builder()
                .username("ivan@gmail.com")
                .firstname("Ivan")
                .lastname("Ivanov")
                .birthDate(LocalDate.of(2000, 1, 19))
                .age(20)
                .build();

        // как хибер составляет sql-запрос при помощи reflection-api:
        // нужно сформировать
        // insert into public.users (age, birth_date, firstname, lastname, username) values (?, ?, ?, ?, ?)

        // 1. Заготовка:
        String sql = """
                INSERT
                INTO
                %s
                (%s)
                VALUES
                (%s)
                """;
        // Теперь в динамичускую составляющую %s нужно подставить при помощи reflection-api значения

        // 2. Получим название таблицы, куда нужно записать данные, но учитывая, что аннотации может не быть, т.к. название
        // таблицы может соответствовать названию класса - тогда хибер берет название класса
        String tableName = Optional.ofNullable(user.getClass().getAnnotation(Table.class))
                .map(tableAnnotation -> tableAnnotation.schema() + "." + tableAnnotation.name())
                .orElse(user.getClass().getName());

        // 3. Получим названия полей с учетом, что поля могут иметь аннотацию указывающую на другое название колоки в БД
        // getDeclaredFields() не гарантирует нам порядок, поэтому в идеале стоило бы их отсортировать по названию
        Field[] declaredFields = user.getClass().getDeclaredFields();
        String columnNames = Arrays.stream(declaredFields)
                .map(field -> Optional.ofNullable(field.getAnnotation(Column.class))
                        .map(Column::name)
                        .orElse(field.getName()))
                .collect(Collectors.joining(", "));

        // 4. Вставим вопросики. Сколько полей, столько и вопросиков
        String columnValues = Arrays.stream(declaredFields)
                .map(field -> "?")
                .collect(Collectors.joining(", "));

        System.out.println(sql.formatted(tableName, columnNames, columnValues));

        // 5. Осталось в prepareStatement передать этот sql и циклом пройтись по каждому полю
        Connection connection = null;
        PreparedStatement preparedStatement = connection
                .prepareStatement(sql.formatted(tableName, columnNames, columnValues));

        for (Field declaredField : declaredFields) {
            declaredField.setAccessible(true);
            // declaredField.get(user) - получаем у филда значение у объекта user
            preparedStatement.setObject(1, declaredField.get(user));
        }
    }
}