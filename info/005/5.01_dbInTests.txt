Тестировать работу с БД на боевой БД - плохая практика.
    1. Можно организовать работу с БД в inMemory - это значит, что БД будет в DDR и скорость будет высокая. Но отсюда
        и откраничения:
            - упало электричество - данные упали
            - на HDD хранить все же можно сильно больше
            - ен все типы данных можно сконвертировать в H2 - это другая БД

        Для такой работы можно использовать H2database (такое себе решение. Гуглим и смотрим, если надо)
        testImplementation 'com.h2database:h2:2.1.214'
        Основное тезисно:
            - создаем новый hibernate.cfg.xml в тестовых ресурсах. Этот файл будет перетирать существующий во время
                работы H2;
            - меняем в файле url, username, password, driver, dialect (гуглим h2 documentation раздел features).
                там сказано:
                - url=jdbc:h2:mem:test_mem (test_mem - не имеет значения)
                - username, password - не нужен, т.к. бд-inMemory
                - driver=org.h2.Driver
                - dialect=org.hibernate.dialect.H2Dialect

    Но как нам накатить БД если она поднимается на ходу на время тестов, а после тестов она уничтожается?
    Два варианта:
        1. СпецМиграциооныеФреймворки - Flyway, Liquibase - мы не умеем и будем юзать генераторы
        2. Генераторы. у хибера он есть из коробки. В xml:
             <property name="hibernate.hbm2ddl.auto">create</property>

                стратегии:
             - update - сразу смотрим разницу между маппингом нашей сущности и готовой схемой. Если что-то изменяется мы
                добавляем либо изменяем существующий DDL
             - create - значит что мы просто накатываем новую DDL на новую БД
             - create-drop - означает, что как только мы закрыли нашу createFactory, то дропается сразу созданная БД
             - validate - просто проверка созданной БД с маппингом нашей сущности

            Это значит, что хибер будет брать наши сущности и на их основании генерировать нам DDL
